name: Docker Build & Deploy


on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'master'
        type: string
      remote_server:
        description: 'Remote server to deploy to'
        required: true
        type: string
        default: '145.239.2.149'

env:
  DOCKERHUB_USERNAME: chainsafeinfra
  DOCKERHUB_REPO: parity
  DOCKERFILE_PATH: ./docker/dockerfiles/polkadot/nginx.Dockerfile
  CONTAINER_NAME: polkadot-nginx
  REMOTE_USER: devops

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
    steps:
      # Checkout the specified branch
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      # Verify checkout TEMP
      - name: Verify branch checkout
        run: |
          echo "Current branch and commit:"
          git status
          git log -1 --oneline
          echo "Directory contents:"
          ls -lah

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Set Docker image tag
      - name: Set Docker image tag
        id: set_tag
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          # Replace slashes in branch name to avoid invalid tag names
          SAFE_BRANCH=$(echo "${{ github.event.inputs.branch }}" | tr '/' '-')
          TAG="${SAFE_BRANCH}-${SHORT_SHA}"
          echo "image_tag=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO }}:${TAG}" >> $GITHUB_OUTPUT

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.set_tag.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Print deployment info
      - name: Print deployment info
        run: |
          echo "Image built and pushed: ${{ steps.set_tag.outputs.image_tag }}"
          echo "Target server: ${{ github.event.inputs.remote_server }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      # - name: Set up SSH
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.CICD_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
      #     chmod 600 ~/.ssh/id_ed25519
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.CICD_PRIVATE_KEY }}

      # TEMP DEBUG: List loaded SSH keys
      - name: List loaded SSH keys
        run: ssh-add -l

      # TEMP DEBUG: Test SSH connection with verbose output and force agent usage
      - name: Test SSH connection
        run: |
          ssh -vvv  -o StrictHostKeyChecking=no ${{ env.REMOTE_USER }}@${{ github.event.inputs.remote_server }} "echo 'SSH connection successful'"

      - name: Deploy to remote server
        run: |
          echo "Deploying image ${{ needs.build-and-push.outputs.image_tag }} to ${{ github.event.inputs.remote_server }}"
          ssh -o StrictHostKeyChecking=no ${{ env.REMOTE_USER }}@${{ github.event.inputs.remote_server }} "
            docker pull ${{ needs.build-and-push.outputs.image_tag }} &&
            docker stop ${{ env.CONTAINER_NAME }} || true &&
            docker rm ${{ env.CONTAINER_NAME }} || true &&
            docker run -d --name ${{ env.CONTAINER_NAME }} -p 8000:80 ${{ needs.build-and-push.outputs.image_tag }}
          "



